// Generated by CoffeeScript 2.3.1
(function() {
  var BASE_FILE_NAME, Strfy, _, dependence, fs, objelity, opn, os, path, safeJsonStringify, util, writeFile;

  _ = require('lodash');

  path = require('path');

  os = require('os');

  util = require('util');

  fs = require('fs');

  writeFile = util.promisify(fs.writeFile);

  opn = require('opn');

  safeJsonStringify = require('safe-json-stringify');

  dependence = require('./dependence');

  objelity = require('objelity');

  BASE_FILE_NAME = 'strfy.html';

  Strfy = (function() {
    var getTmpFilePath, makeHtml, stringConvertingByType;

    class Strfy {
      constructor(obj) {
        this.filePath = getTmpFilePath();
        this.body = stringConvertingByType(obj);
      }

      save() {
        var filePath;
        filePath = this.filePath;
        return new Promise((resolve, reject) => {
          return makeHtml(this.body).then(function(_html) {
            return writeFile(filePath, _html).then(function() {
              return resolve(filePath);
            });
          }).catch(reject);
        });
      }

      open() {
        return new Promise((resolve, reject) => {
          return this.save().then(function(filePath) {
            return opn(filePath, {
              wait: false
            }).then(function() {
              return resolve(filePath);
            });
          }).catch(reject);
        });
      }

      static save(obj) {
        return new Strfy(obj).save();
      }

      static open(obj) {
        return new Strfy(obj).open();
      }

      static path() {
        return getTmpFilePath();
      }

    };

    getTmpFilePath = function() {
      var tmpDir;
      tmpDir = os.tmpdir();
      return path.join(tmpDir, BASE_FILE_NAME);
    };

    stringConvertingByType = function(obj) {
      switch (typeof obj) {
        case 'undefined':
          return 'undefined';
        case 'boolean':
        case 'number':
        case 'string':
          return safeJsonStringify(obj);
        case 'function':
          return obj.toString();
        default:
          if (_.isNull(obj)) {
            return safeJsonStringify(obj);
          } else if (_.isArray(obj)) {
            return safeJsonStringify(obj);
          } else {
            return safeJsonStringify(objelity.toStringOfDeepKeys(obj));
          }
      }
    };

    makeHtml = function(body) {
      return new Promise(function(resolve, reject) {
        return Promise.all([dependence.htmlTemplate(), dependence.vue(), dependence.vue_json_pretty(), dependence.logo()]).then(function(arr) {
          var _html, compiled;
          compiled = _.template(arr[0]);
          _html = compiled({
            logo: arr[3],
            vue_js: arr[1],
            vue_json_pretty_js: arr[2],
            json_body: body,
            tmpPath: os.tmpdir()
          });
          return resolve(_html);
        }).catch(reject);
      });
    };

    return Strfy;

  }).call(this);

  module.exports = Strfy;

}).call(this);
